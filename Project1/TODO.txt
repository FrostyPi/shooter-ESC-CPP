

Current TODO:
implement a comparison < operator for the entities, in terms of m_id to allow for sorting upon removing

POTENTIAL IDEAS FOR REMOVAL:
 - swap to remove, and then sort
 - erase-remove within a loop? perhaps using m_id
 - vec.erase(std::remove_if(vec.begin(), vec.end(), [](std::shared_ptr<Entity> entity) { return !entity->isActive(); }), vec.end());
 - faster solution?


 OK NOW TODO:
 1. implement lifespan
 2. 




 ISSUES:
GHOST ENTITIES: removal doesn't fully work because some functions may reference destroyed entity, namely the player and enemies
remove components or something? idk man